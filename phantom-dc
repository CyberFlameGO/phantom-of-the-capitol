#!/usr/bin/env ruby
# encoding: utf-8

# This file can be used to start Padrino,
# just execute it from the command line.

require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end

  opts.on("--from-git <git-url>", String, "Add a data source from git") do |from_git|
    options[:from_git] = from_git
  end

  opts.on("-h", "--help", "Display help dialogue") do
    options[:help] = true
  end
end.parse!

if not options[:verbose]
  PADRINO_LOGGER = {
    development: {stream: :null},
    production: {stream: :null},
    test: {stream: :null}
  }
end

def require_boot
  require File.expand_path("../config/boot.rb", __FILE__)
end

def usage
  format = "  %-20.20s%-40.40s\n"
  puts "Usage: phantom-dc [--verbose] [--help] <command> [<args>]"
  puts ""
  puts "Commands:"
  printf format, "datasource", "manipulate (add or delete) a data source"
end

def usage_datasource
  format = "  %-10.10s%-40.40s\n"
  puts "Usage: phantom-dc [<flags>] datasource <args>"
  puts "Usage: phantom-dc [<flags>] datasource add [--from-git <git-url>] <name> <path> <yaml_subpath>"
  puts "Usage: phantom-dc [<flags>] datasource delete <name>"
  puts "Usage: phantom-dc [<flags>] datasource list"
  puts ""
  puts "Arguments:"

  printf format, "add", "a new data source"
  printf format, "delete", "delete a data source"
  printf format, "list", "provide a list of data sources"
end

if ARGV.length == 0
  usage
  exit
end

case ARGV[0]
when "datasource"
  if options[:help]
    usage_datasource
    exit
  end
  case ARGV[1]
  when "add"
    if ARGV.length != 5
      usage_datasource
      exit
    end

    require_boot
    if DataSource.find_by_name(ARGV[2]).nil?
      if options[:from_git]
        require 'pathname'
        full_path = Pathname.new(ARGV[3])
        parent_path = full_path.parent
        base_path = full_path.basename
        g = Git.clone options[:from_git], base_path, path: parent_path
      else
        g = Git.open ARGV[3]
      end
      latest_commit = g.log(1).first.sha
      DataSource.create(name: ARGV[2], path: ARGV[3], yaml_subpath: ARGV[4], latest_commit: latest_commit)
    else
      puts "Error: Data source with name " + ARGV[2] + " already exists!"
      exit 1
    end
    puts "Data source created."
  when "delete"
    if ARGV.length != 3
      usage_datasource
      exit
    end

    require_boot
    ds = DataSource.find_by(name: ARGV[2])
    if ds.nil?
      puts "Error: Data source with name '" + ARGV[2] + "' was not found."
      exit 1
    else
      ds.destroy
      puts "Data source deleted."
    end
  when "list"
    require_boot

    name_length = [(DataSource.all.map{ |ds| ds.name.length }.max + 2) || 0, 20].max
    path_length = [(DataSource.all.map{ |ds| ds.path.length }.max + 2) || 0, 40].max
    subp_length = [(DataSource.all.map{ |ds| ds.yaml_subpath.length }.max + 2) || 0, 40].max
    comm_length = 42

    format = "%-" + name_length.to_s + "." + name_length.to_s + "s%-" + path_length.to_s + "." + path_length.to_s + "s%-" + subp_length.to_s + "." + subp_length.to_s + "s%-" + comm_length.to_s + "." + comm_length.to_s + "s\n"

    separator = "=" * 600
    printf format, "name", "path", "yaml_subpath", "latest commit"
    printf format, separator, separator, separator, separator

    DataSource.all.each do |ds|
      printf format, ds.name, ds.path, ds.yaml_subpath, ds.latest_commit.to_s
    end
  else
    usage_datasource
  end
else
  usage
end

